{"ast":null,"code":"import Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\";\nexport default {\n  name: 'App',\n  components: {\n    Footer,\n    Middle,\n    Header\n  },\n  data: function () {\n    return {\n      user: null,\n      posts: [],\n      users: []\n    };\n  },\n  beforeMount() {\n    if (localStorage.getItem(\"jwt\") && !this.user) {\n      this.$root.$emit(\"onJwt\", localStorage.getItem(\"jwt\"));\n    }\n    axios.get(\"/api/1/posts\").then(response => {\n      this.posts = response.data;\n    });\n    axios.get(\"/api/1/users\").then(response => {\n      this.users = response.data;\n    });\n  },\n  beforeCreate() {\n    this.$root.$on(\"onEnter\", (login, password) => {\n      if (password === \"\") {\n        this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n        return;\n      }\n      axios.post(\"/api/1/jwt\", {\n        login,\n        password\n      }).then(response => {\n        localStorage.setItem(\"jwt\", response.data);\n        this.$root.$emit(\"onJwt\", response.data);\n      }).catch(error => {\n        this.$root.$emit(\"onEnterValidationError\", error.response.data);\n      });\n    });\n    this.$root.$on(\"onRegister\", (login, name, password) => {\n      if (password === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Password is required\");\n        return;\n      }\n      axios.post(\"/api/1/users\", {\n        login,\n        name,\n        password\n      }).then(response => {\n        //this.$root.$emit(\"onChangePage\", \"Index\");\n        this.$root.$emit(\"onEnter\", response.data.login, response.data.password);\n      }).catch(error => {\n        this.$root.$emit(\"onRegisterValidationError\", error.response.data);\n      });\n    });\n    this.$root.$on(\"onWriteComment\", text => {\n      if (this.userId) {\n        if (!this.postId) {\n          this.$root.$emit(\"onWriteCommentValidationError\", \"ID is invalid\");\n        } else if (!text || text.trim().length < 10) {\n          this.$root.$emit(\"onWriteCommentValidationError\", \"Text is too short\");\n        } else {\n          axios.post(\"/api/1/posts/comment\", {\n            omment,\n            user: this.user\n          }).then(() => {\n            axios.get(\"/api/1/posts\").then(response => {\n              this.posts = response.data;\n            });\n            this.$root.$emit(\"onChangePage\", \"Index\");\n          }).catch(error => {\n            this.$root.$emit(\"onWritePostValidationError\", error.response.data);\n          });\n          const id = Math.max(...Object.keys(this.comments)) + 1;\n          this.$root.$set(this.comments, id, {\n            id,\n            text,\n            userId: this.userId,\n            postId: this.postId\n          });\n          this.$root.$emit(\"onWriteCommentValidationError\", \"\");\n        }\n      } else {\n        this.$root.$emit(\"onWriteCommentValidationError\", \"No access\");\n      }\n    });\n    this.$root.$on(\"onWritePost\", (title, text) => {\n      if (this.user) {\n        if (!title || title.trim().length < 5) {\n          this.$root.$emit(\"onWritePostValidationError\", \"Title is too short\");\n        } else if (!text || text.trim().length < 10) {\n          this.$root.$emit(\"onWritePostValidationError\", \"Text is too short\");\n        } else {\n          axios.post(\"/api/1/posts\", {\n            title,\n            text,\n            user: this.user\n          }).then(() => {\n            axios.get(\"/api/1/posts\").then(response => {\n              this.posts = response.data;\n            });\n            this.$root.$emit(\"onChangePage\", \"Index\");\n          }).catch(error => {\n            this.$root.$emit(\"onWritePostValidationError\", error.response.data);\n          });\n        }\n      } else {\n        this.$root.$emit(\"onWritePostValidationError\", \"No access\");\n      }\n    });\n    this.$root.$on(\"onJwt\", jwt => {\n      localStorage.setItem(\"jwt\", jwt);\n      axios.get(\"/api/1/users/auth\", {\n        params: {\n          jwt\n        }\n      }).then(response => {\n        this.user = response.data;\n        this.$root.$emit(\"onChangePage\", \"Index\");\n      }).catch(() => this.$root.$emit(\"onLogout\"));\n    });\n    this.$root.$on(\"onLogout\", () => {\n      localStorage.removeItem(\"jwt\");\n      this.user = null;\n    });\n  }\n};","map":{"version":3,"names":["Header","Middle","Footer","axios","name","components","data","user","posts","users","beforeMount","localStorage","getItem","$root","$emit","get","then","response","beforeCreate","$on","login","password","post","setItem","catch","error","text","userId","postId","trim","length","omment","id","Math","max","Object","keys","comments","$set","title","jwt","params","removeItem"],"sources":["src/App.vue"],"sourcesContent":["<template>\n    <div id=\"app\">\n        <Header :user=\"user\"/>\n        <Middle :user=\"user\" :posts=\"posts\" :users=\"users\"/>\n        <Footer/>\n    </div>\n</template>\n\n<script>\nimport Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\"\n\nexport default {\n    name: 'App',\n    components: {\n        Footer,\n        Middle,\n        Header\n    },\n    data: function () {\n        return {\n            user: null,\n            posts: [],\n            users: []\n        }\n    },\n    beforeMount() {\n        if (localStorage.getItem(\"jwt\") && !this.user) {\n            this.$root.$emit(\"onJwt\", localStorage.getItem(\"jwt\"));\n        }\n\n        axios.get(\"/api/1/posts\").then(response => {\n            this.posts = response.data;\n        });\n\n        axios.get(\"/api/1/users\").then(response => {\n            this.users = response.data;\n        });\n    },\n    beforeCreate() {\n        this.$root.$on(\"onEnter\", (login, password) => {\n            if (password === \"\") {\n                this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n                return;\n            }\n\n            axios.post(\"/api/1/jwt\", {\n                    login, password\n            }).then(response => {\n                localStorage.setItem(\"jwt\", response.data);\n                this.$root.$emit(\"onJwt\", response.data);\n            }).catch(error => {\n                this.$root.$emit(\"onEnterValidationError\", error.response.data);\n            });\n        });\n        this.$root.$on(\"onRegister\", (login, name, password) => {\n            if (password === \"\") {\n                this.$root.$emit(\"onRegisterValidationError\", \"Password is required\");\n                return;\n            }\n            axios.post(\"/api/1/users\", {\n                login, name, password\n            }).then(response => {\n\n                //this.$root.$emit(\"onChangePage\", \"Index\");\n                                this.$root.$emit(\"onEnter\", response.data.login, response.data.password);\n            }).catch(error => {\n                this.$root.$emit(\"onRegisterValidationError\", error.response.data);\n            });\n        });\n        this.$root.$on(\"onWriteComment\", (text) => {\n            if (this.userId) {\n                if (!this.postId) {\n                    this.$root.$emit(\"onWriteCommentValidationError\", \"ID is invalid\");\n\n                } else if (!text || text.trim().length < 10) {\n                    this.$root.$emit(\"onWriteCommentValidationError\", \"Text is too short\");\n                } else {\n\n                    axios.post(\"/api/1/posts/comment\", {\n                        omment, user: this.user\n                    }).then(() => {\n                        axios.get(\"/api/1/posts\").then(response => {\n                            this.posts = response.data;\n                        });\n                        this.$root.$emit(\"onChangePage\", \"Index\")\n                    }).catch(error => {\n                        this.$root.$emit(\"onWritePostValidationError\", error.response.data);\n                    });\n\n                    const id = Math.max(...Object.keys(this.comments)) + 1;\n                    this.$root.$set(this.comments, id, {\n                        id, text, userId: this.userId, postId: this.postId,\n                    });\n\n                    this.$root.$emit(\"onWriteCommentValidationError\", \"\");\n                }\n            } else {\n                this.$root.$emit(\"onWriteCommentValidationError\", \"No access\");\n\n            }\n\n        });\n        this.$root.$on(\"onWritePost\", (title, text) => {\n            if (this.user) {\n                if (!title || title.trim().length < 5) {\n                    this.$root.$emit(\"onWritePostValidationError\", \"Title is too short\");\n                } else if (!text || text.trim().length < 10) {\n                    this.$root.$emit(\"onWritePostValidationError\", \"Text is too short\");\n                } else {\n                    axios.post(\"/api/1/posts\", {\n                        title, text, user: this.user\n                    }).then(() => {\n                        axios.get(\"/api/1/posts\").then(response => {\n                            this.posts = response.data;\n                        });\n                        this.$root.$emit(\"onChangePage\", \"Index\")\n                    }).catch(error => {\n                        this.$root.$emit(\"onWritePostValidationError\", error.response.data);\n                    });\n                }\n            } else {\n                this.$root.$emit(\"onWritePostValidationError\", \"No access\");\n            }\n        });\n        this.$root.$on(\"onJwt\", (jwt) => {\n            localStorage.setItem(\"jwt\", jwt);\n\n            axios.get(\"/api/1/users/auth\", {\n                params: {\n                    jwt\n                }\n            }).then(response => {\n                this.user = response.data;\n                this.$root.$emit(\"onChangePage\", \"Index\");\n            }).catch(() => this.$root.$emit(\"onLogout\"))\n        });\n\n        this.$root.$on(\"onLogout\", () => {\n            localStorage.removeItem(\"jwt\");\n            this.user = null;\n        });\n\n    }\n}\n</script>\n\n<style>\n#app {\n\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}