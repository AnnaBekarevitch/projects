{"ast":null,"code":"import Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\";\nexport default {\n  name: 'App',\n  components: {\n    Footer,\n    Middle,\n    Header\n  },\n  data: function () {\n    return {\n      user: null,\n      post: null,\n      posts: [],\n      users: []\n    };\n  },\n  beforeMount() {\n    if (localStorage.getItem(\"jwt\") && !this.user) {\n      this.$root.$emit(\"onJwt\", localStorage.getItem(\"jwt\"));\n    }\n    axios.get(\"/api/1/posts\").then(response => {\n      this.posts = response.data;\n    });\n    axios.get(\"/api/1/users\").then(response => {\n      this.users = response.data;\n    });\n  },\n  beforeCreate() {\n    this.$root.$on(\"onEnter\", (login, password) => {\n      if (password === \"\") {\n        this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n        return;\n      }\n      axios.post(\"/api/1/jwt\", {\n        login,\n        password\n      }).then(response => {\n        localStorage.setItem(\"jwt\", response.data);\n        this.$root.$emit(\"onJwt\", response.data);\n      }).catch(error => {\n        this.$root.$emit(\"onEnterValidationError\", error.response.data);\n      });\n    });\n    this.$root.$on(\"onRegister\", (login, name, password) => {\n      if (password === \"\") {\n        this.$root.$emit(\"onRegisterValidationError\", \"Password is required\");\n        return;\n      }\n      axios.post(\"/api/1/users\", {\n        login,\n        name,\n        password\n      }).then(response => {\n        //this.$root.$emit(\"onChangePage\", \"Index\");\n        this.$root.$emit(\"onEnter\", response.data.login, response.data.password);\n      }).catch(error => {\n        this.$root.$emit(\"onRegisterValidationError\", error.response.data);\n      });\n    });\n    this.$root.$on(\"onWriteComment\", text => {\n      if (this.user) {\n        if (!this.post) {\n          this.$root.$emit(\"onWriteCommentValidationError\", \"ID is invalid\");\n          console.log(post);\n        } else if (!text || text.trim().length < 10) {\n          this.$root.$emit(\"onWriteCommentValidationError\", \"Text is too short\");\n        } else {\n          axios.post(\"/api/1/posts/comment\", {\n            text,\n            user: this.user,\n            post: this.posts.filter(post => post.id === this.post.id)\n          }).then(() => {\n            axios.get(\"/api/1/posts\").then(response => {\n              this.posts = response.data;\n            });\n            this.$root.$emit(\"onChangePage\", \"Index\");\n          }).catch(error => {\n            this.$root.$emit(\"onWriteCommentValidationError\", error.response.data);\n          });\n          this.$root.$emit(\"onWriteCommentValidationError\", \"\");\n        }\n      } else {\n        this.$root.$emit(\"onWriteCommentValidationError\", \"No access\");\n      }\n    });\n    this.$root.$on(\"onWritePost\", (title, text) => {\n      if (this.user) {\n        if (!title || title.trim().length < 5) {\n          this.$root.$emit(\"onWritePostValidationError\", \"Title is too short\");\n        } else if (!text || text.trim().length < 10) {\n          this.$root.$emit(\"onWritePostValidationError\", \"Text is too short\");\n        } else {\n          axios.post(\"/api/1/posts\", {\n            title,\n            text,\n            user: this.user\n          }).then(() => {\n            axios.get(\"/api/1/posts\").then(response => {\n              this.posts = response.data;\n            });\n            this.$root.$emit(\"onChangePage\", \"Index\");\n          }).catch(error => {\n            this.$root.$emit(\"onWritePostValidationError\", error.response.data);\n          });\n        }\n      } else {\n        this.$root.$emit(\"onWritePostValidationError\", \"No access\");\n      }\n    });\n    this.$root.$on(\"onJwt\", jwt => {\n      localStorage.setItem(\"jwt\", jwt);\n      axios.get(\"/api/1/users/auth\", {\n        params: {\n          jwt\n        }\n      }).then(response => {\n        this.user = response.data;\n        this.$root.$emit(\"onChangePage\", \"Index\");\n      }).catch(() => this.$root.$emit(\"onLogout\"));\n    });\n    this.$root.$on(\"onLogout\", () => {\n      localStorage.removeItem(\"jwt\");\n      this.user = null;\n    });\n  }\n};","map":{"version":3,"names":["Header","Middle","Footer","axios","name","components","data","user","post","posts","users","beforeMount","localStorage","getItem","$root","$emit","get","then","response","beforeCreate","$on","login","password","setItem","catch","error","text","console","log","trim","length","filter","id","title","jwt","params","removeItem"],"sources":["src/App.vue"],"sourcesContent":["<template>\n    <div id=\"app\">\n        <Header :user=\"user\"/>\n        <Middle :user=\"user\"  :posts=\"posts\" :users=\"users\" :post=\"post\"/>\n        <Footer/>\n    </div>\n</template>\n\n<script>\nimport Header from \"./components/Header\";\nimport Middle from \"./components/Middle\";\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\"\n\nexport default {\n    name: 'App',\n    components: {\n        Footer,\n        Middle,\n        Header\n    },\n    data: function () {\n        return {\n            user: null,\n            post: null,\n            posts: [],\n            users: []\n        }\n    },\n    beforeMount() {\n        if (localStorage.getItem(\"jwt\") && !this.user) {\n            this.$root.$emit(\"onJwt\", localStorage.getItem(\"jwt\"));\n        }\n\n        axios.get(\"/api/1/posts\").then(response => {\n            this.posts = response.data;\n        });\n\n        axios.get(\"/api/1/users\").then(response => {\n            this.users = response.data;\n        });\n    },\n    beforeCreate() {\n        this.$root.$on(\"onEnter\", (login, password) => {\n            if (password === \"\") {\n                this.$root.$emit(\"onEnterValidationError\", \"Password is required\");\n                return;\n            }\n\n            axios.post(\"/api/1/jwt\", {\n                    login, password\n            }).then(response => {\n                localStorage.setItem(\"jwt\", response.data);\n                this.$root.$emit(\"onJwt\", response.data);\n            }).catch(error => {\n                this.$root.$emit(\"onEnterValidationError\", error.response.data);\n            });\n        });\n        this.$root.$on(\"onRegister\", (login, name, password) => {\n            if (password === \"\") {\n                this.$root.$emit(\"onRegisterValidationError\", \"Password is required\");\n                return;\n            }\n            axios.post(\"/api/1/users\", {\n                login, name, password\n            }).then(response => {\n\n                //this.$root.$emit(\"onChangePage\", \"Index\");\n                                this.$root.$emit(\"onEnter\", response.data.login, response.data.password);\n            }).catch(error => {\n                this.$root.$emit(\"onRegisterValidationError\", error.response.data);\n            });\n        });\n        this.$root.$on(\"onWriteComment\", (text) => {\n            if (this.user) {\n                if (!this.post) {\n                    this.$root.$emit(\"onWriteCommentValidationError\", \"ID is invalid\");\n                    console.log(post)\n                } else if (!text || text.trim().length < 10) {\n                    this.$root.$emit(\"onWriteCommentValidationError\", \"Text is too short\");\n                } else {\n\n                    axios.post(\"/api/1/posts/comment\", {\n                        text, user: this.user, post : this.posts.filter(post => post.id === this.post.id)\n                    }).then(() => {\n                        axios.get(\"/api/1/posts\").then(response => {\n                            this.posts = response.data;\n                        });\n                        this.$root.$emit(\"onChangePage\", \"Index\")\n                    }).catch(error => {\n                        this.$root.$emit(\"onWriteCommentValidationError\", error.response.data);\n                    });\n                    this.$root.$emit(\"onWriteCommentValidationError\", \"\");\n                }\n            } else {\n                this.$root.$emit(\"onWriteCommentValidationError\", \"No access\");\n\n            }\n\n        });\n        this.$root.$on(\"onWritePost\", (title, text) => {\n            if (this.user) {\n                if (!title || title.trim().length < 5) {\n                    this.$root.$emit(\"onWritePostValidationError\", \"Title is too short\");\n                } else if (!text || text.trim().length < 10) {\n                    this.$root.$emit(\"onWritePostValidationError\", \"Text is too short\");\n                } else {\n                    axios.post(\"/api/1/posts\", {\n                        title, text, user: this.user\n                    }).then(() => {\n                        axios.get(\"/api/1/posts\").then(response => {\n                            this.posts = response.data;\n                        });\n                        this.$root.$emit(\"onChangePage\", \"Index\")\n                    }).catch(error => {\n                        this.$root.$emit(\"onWritePostValidationError\", error.response.data);\n                    });\n                }\n            } else {\n                this.$root.$emit(\"onWritePostValidationError\", \"No access\");\n            }\n        });\n        this.$root.$on(\"onJwt\", (jwt) => {\n            localStorage.setItem(\"jwt\", jwt);\n\n            axios.get(\"/api/1/users/auth\", {\n                params: {\n                    jwt\n                }\n            }).then(response => {\n                this.user = response.data;\n                this.$root.$emit(\"onChangePage\", \"Index\");\n            }).catch(() => this.$root.$emit(\"onLogout\"))\n        });\n\n        this.$root.$on(\"onLogout\", () => {\n            localStorage.removeItem(\"jwt\");\n            this.user = null;\n        });\n\n    }\n}\n</script>\n\n<style>\n#app {\n\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}