package ru.itmo.wp.model.repository.impl;
import ru.itmo.wp.model.domain.Talk;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.TalkRepository;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;


public class TalkRepositoryImpl extends BasicRepositoryImpl<Talk> implements TalkRepository {
    private static final Map<String, Class<?>> params = Map.of(
            "sourceUserId", long.class,
            "targetUserId", long.class,
            "text", String.class,
            "targetUserLogin", String.class,
            "sourceUserLogin", String.class
    );
    public TalkRepositoryImpl(Class<?> token) {
        super(token);
    }

    @Override
    public void save(Talk talk) {
        super.baseSave(talk, Map.of(
                "sourceUserId", String.valueOf(talk.getSourceUserId()),
                "targetUserId", String.valueOf(talk.getTargetUserId()),
                "text", talk.getText()
        ), params);
    }

    public List<Talk> findByUserId(long sourceUserId) {
        List<Talk> talks = new ArrayList<>();
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT Talk.*, U1.login AS targetUserLogin, U2.login as sourceUserLogin FROM Talk JOIN User AS U1 ON U1.id = Talk.targetUserId JOIN User AS U2 ON U2.id = Talk.sourceUserId WHERE sourceUserId=? OR targetUserId=? ORDER BY Talk.creationTime DESC")) {
                statement.setString(1, String.valueOf(sourceUserId));
                statement.setString(2, String.valueOf(sourceUserId));
                try (ResultSet resultSet = statement.executeQuery()) {
                    Talk talk;
                    while ((talk = super.parse(statement.getMetaData(), resultSet, params)) != null) {
                        talks.add(talk);
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find Talks.", e);
        }
        return talks;
    }
}
/*
public class TalkRepositoryImpl extends BasicRepositoryImpl implements TalkRepository {

    private final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

    public void save(Talk talk) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement(
                    "INSERT INTO `Talk` (`sourceUserId`, `targetUserId`, `text`, `creationTime`) VALUES (?, ?, ?, NOW())",
                    Statement.RETURN_GENERATED_KEYS
            )) {
                statement.setString(1, String.valueOf(talk.getSourceUserId()));
                statement.setString(2, String.valueOf(talk.getTargetUserId()));
                statement.setString(3, String.valueOf(talk.getText()));
                if (statement.executeUpdate() != 1) {
                    throw new RepositoryException("Can't save Talk.");
                } else {
                    ResultSet generatedKeys = statement.getGeneratedKeys();
                    if (generatedKeys.next()) {
                        talk.setId(generatedKeys.getLong(1));
                        talk.setCreationTime(find(talk.getId()).getCreationTime());
                    } else {
                        throw new RepositoryException("Can't save User [no autogenerated fields].");
                    }
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save Talk.", e);
        }
    }

    public Talk find(long id) {
        try (Connection connection = DATA_SOURCE.getConnection()) {
            try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM Talk WHERE id=?")) {
                statement.setLong(1, id);
                try (ResultSet resultSet = statement.executeQuery()) {
                    return toTalk(statement.getMetaData(), resultSet);
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find Talk.", e);
        }
    }

    private Talk toTalk(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException {
        if (!resultSet.next()) {
            return null;
        }

        Talk talk = new Talk();
        for (int i = 1; i <= metaData.getColumnCount(); i++) {
            String name = metaData.getColumnName(i);
            switch (metaData.getColumnName(i)) {
                case "id":
                    talk.setId(resultSet.getLong(i));
                    break;
                case "sourceUserId":
                    talk.setSourceUserId(resultSet.getLong(i));
                    break;
                case "targetUserId":
                    talk.setTargetUserId(resultSet.getLong(i));
                    break;
                case "creationTime":
                    talk.setCreationTime(resultSet.getTimestamp(i));
                    break;
                case "login":
                    talk.setTargetUserLogin(resultSet.getString(i));
                    break;
                case "text":
                    talk.setText(resultSet.getString(i));
                    break;
                default:
                    // No operations.
            }
        }

        return talk;
    }



}
*/